require_relative "token.rb"
require_relative "game.rb"

class Board
  def initialize
    # Initialize board map hash
    keys = []
    8.times do |i|
      row = (97 + i).chr
      8.times do |i|
        keys << "#{row}#{i+1}"
      end
    end

    locations = []
    8.times do |i|
      row = i
      8.times do |i|
        locations << [row,i]
      end
    end

    keys = keys.map!(&:to_sym)

    @bm = Hash[keys.map{ |x| [x,{}] }]

    @bm.each_with_index do |(k,v),i|
      @bm[k] = []
      @bm[k] << locations[i]
      @bm[k] << " "
    end

    # Add White team tokens
    Rook.new("W",7,0)
    Rook.new("W",7,7)
    Knight.new("W",7,1)
    Knight.new("W",7,6)
    Bishop.new("W",7,2)
    Bishop.new("W",7,5)
    Queen.new("W",7,3)
    King.new("W",7,4)
    8.times { |i| Pawn.new("W",6,i) }

    # And Black team tokens
    Rook.new("B",0,0)
    Rook.new("B",0,7)
    Knight.new("B",0,1)
    Knight.new("B",0,6)
    Bishop.new("B",0,2)
    Bishop.new("B",0,5)
    Queen.new("B",0,3)
    King.new("B",0,4)
    8.times { |i| Pawn.new("B",1,i) }

    @token_list = Proc.new {Token.class_variable_get(:@@tokens)}
  end
  
  # Updates the @bm with the selected token possible moves,
  #  generated by Token.find_possible_moves.
  def plot_selected_token_moves(token)
    empty_squares = @bm.select { |k,v| v[1] == " "}
    
    final_positions = token.find_possible_moves

    empty_squares.each do |square|
      final_positions.each do |position|
        if square[1][0] === position
          square[1][1] = "X"
        end
      end
    end
  end

  # Updates the @bm with all current tokens on the board in associated locations.
  def render_current_tokens
    @bm.each do |cell|
      @token_list.call.each do |token|
        if cell[1][0] === token.location
          cell[1][1] = token.icon
        end
      end
    end
  end

  def render
    puts %{
      A   B   C   D   E   F   G   H
    +---+---+---+---+---+---+---+---+
  1 | #{@bm[:a1][1]} | #{@bm[:a2][1]} | #{@bm[:a3][1]} | #{@bm[:a4][1]} | #{@bm[:a5][1]} | #{@bm[:a6][1]} | #{@bm[:a7][1]} | #{@bm[:a8][1]} |
    +---+---+---+---+---+---+---+---+
  2 | #{@bm[:b1][1]} | #{@bm[:b2][1]} | #{@bm[:b3][1]} | #{@bm[:b4][1]} | #{@bm[:b5][1]} | #{@bm[:b6][1]} | #{@bm[:b7][1]} | #{@bm[:b8][1]} |
    +---+---+---+---+---+---+---+---+
  3 | #{@bm[:c1][1]} | #{@bm[:c2][1]} | #{@bm[:c3][1]} | #{@bm[:c4][1]} | #{@bm[:c5][1]} | #{@bm[:c6][1]} | #{@bm[:c7][1]} | #{@bm[:c8][1]} |
    +---+---+---+---+---+---+---+---+
  4 | #{@bm[:d1][1]} | #{@bm[:d2][1]} | #{@bm[:d3][1]} | #{@bm[:d4][1]} | #{@bm[:d5][1]} | #{@bm[:d6][1]} | #{@bm[:d7][1]} | #{@bm[:d8][1]} |
    +---+---+---+---+---+---+---+---+
  5 | #{@bm[:e1][1]} | #{@bm[:e2][1]} | #{@bm[:e3][1]} | #{@bm[:e4][1]} | #{@bm[:e5][1]} | #{@bm[:e6][1]} | #{@bm[:e7][1]} | #{@bm[:e8][1]} |
    +---+---+---+---+---+---+---+---+
  6 | #{@bm[:f1][1]} | #{@bm[:f2][1]} | #{@bm[:f3][1]} | #{@bm[:f4][1]} | #{@bm[:f5][1]} | #{@bm[:f6][1]} | #{@bm[:f7][1]} | #{@bm[:f8][1]} |
    +---+---+---+---+---+---+---+---+
  7 | #{@bm[:g1][1]} | #{@bm[:g2][1]} | #{@bm[:g3][1]} | #{@bm[:g4][1]} | #{@bm[:g5][1]} | #{@bm[:g6][1]} | #{@bm[:g7][1]} | #{@bm[:g8][1]} |
    +---+---+---+---+---+---+---+---+
  8 | #{@bm[:h1][1]} | #{@bm[:h2][1]} | #{@bm[:h3][1]} | #{@bm[:h4][1]} | #{@bm[:h5][1]} | #{@bm[:h6][1]} | #{@bm[:h7][1]} | #{@bm[:h8][1]} |
    +---+---+---+---+---+---+---+---+
    }
  end
end
